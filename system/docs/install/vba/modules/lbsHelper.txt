Option Explicit

'=============================================
' Sets correct actionpad settings for all inspectors and the main AP
'
' Param "bPublishable" changes settings to a publishable version as
' the settings are not supported by the client GUI in the current versions
'=============================================
Public Sub setActionpads(Optional ByVal bPublishable As Boolean = False)
On Error GoTo ErrorHandler

    Dim oClass As LDE.Class
    Dim bShouldExist As Boolean
    Dim oFiles As Scripting.Dictionary
    
    'get avalible actionpad files
    Set oFiles = lbsHelper.getAvaliableActionpads
    
    'set inspector actionpads
    For Each oClass In ThisApplication.Database.Classes
        bShouldExist = oFiles.Exists(oClass.Name)
        Call lbsHelper.setActionpad(oClass.Name, bShouldExist, bPublishable)
    Next oClass
    
    'set main actionpad
    Call lbsHelper.setActionpad("index", True, bPublishable)

Exit Sub
ErrorHandler:
    Call UI.ShowError("lbsHelper.setActionpads")
End Sub

'=============================================
' Wrapper for "setActionpads" with "publishable" set to true
'=============================================
Public Sub setActionpadsPublishable()
On Error GoTo ErrorHandler

    Call lbsHelper.setActionpads(True)

Exit Sub
ErrorHandler:
    Call UI.ShowError("lbsHelper.setActionpadsPublishable")
End Sub

'=============================================
' Apply settings for a specific actionpad
' Removed actionpad if "bShouldExist" is false
' Sets without get params if "bPublishable" is true
'=============================================
Public Sub setActionpad(ByVal sClass As String, ByVal bShouldExist As Boolean, Optional ByVal bPublishable As Boolean = False)
On Error GoTo ErrorHandler

    Dim oSettings As LDE.Settings
    Dim sInspectorGUID As String
    Dim sUrlBase As String
    Dim sUrlSuffix As String
    Dim sUrl As String
    Dim lVisible As Long
    Dim hasInspectorIdSupport As Boolean
    
    hasInspectorIdSupport = IIf(lbsHelper.getComparableVersion(ThisApplication.Version) > lbsHelper.getComparableVersion("10.11.0"), True, False)
    
    sUrlBase = ThisApplication.WebFolder + "lbs.html"
    sUrlSuffix = IIf(bPublishable Or hasInspectorIdSupport, "", "?ap=" + sClass)
    sUrl = IIf(bShouldExist, sUrlBase + sUrlSuffix, "")
    lVisible = IIf(VBA.Len(sUrl) > 0, 1, 0)
    
    'index gets special treetment as it is not reloaded frequently and handle is avalible
    If sClass = "index" Then
        ThisApplication.WebBar.url = sUrl
    'normal inspector AP
    Else
        'find inspector GUID
        sInspectorGUID = Database.Classes(sClass).GUID
        'find inspector settings
        Set oSettings = ThisApplication.Database.Settings.Item("Inspectors")
        'check if inspector of the shoosen class exists
        If oSettings.Exists(sInspectorGUID) Then
            'write url and visible property
            Call oSettings.Item(sInspectorGUID + "\WebBar").Write("URL", sUrl)
            Call oSettings.Item(sInspectorGUID + "\WebBar").Write("Visible", lVisible)
        End If
    End If

Exit Sub
ErrorHandler:
    Call UI.ShowError("lbsHelper.setActionpad")
End Sub

'=============================================
' Collects all avalible actionpad views in a dictionary
'=============================================
Public Function getAvaliableActionpads() As Scripting.Dictionary
On Error GoTo ErrorHandler
    
    Dim sFileName As String
    Dim sClassName As String
    Dim oFiles As New Scripting.Dictionary
    
    sFileName = Dir(ThisApplication.WebFolder + "\*.html")
    Do While Len(sFileName) > 0
        sClassName = VBA.Left(sFileName, VBA.Len(sFileName) - 5)
        'dont add the aplication entrypoint
        If sClassName <> "lbs" Then
            Call oFiles.Add(sClassName, sClassName)
        End If
        sFileName = Dir
    Loop
    
    Set getAvaliableActionpads = oFiles
    
Exit Function
ErrorHandler:
    Call UI.ShowError("lbsHelper.getAvaliableActionpads")
End Function

'=============================================
' Load file as if from webserver
'=============================================
Public Function loadHTTPResource(FilePath As String) As String
    On Error GoTo ErrorHandler
    Dim oXHTTP As Object
    Dim s As String
    Set oXHTTP = CreateObject("MSXML2.XMLHTTP")
    oXHTTP.Open "GET", WebFolder + FilePath, False
    oXHTTP.Send
    loadHTTPResource = oXHTTP.responseText
Exit Function
ErrorHandler:
    loadHTTPResource = ""
End Function

'=============================================
' Load Xml from storedProcedure
'=============================================
Public Function loadXmlFromStoredProcedure(procedureName As String) As String
    On Error GoTo ErrorHandler
    Dim sXml As String
    Dim oProcedure As LDE.Procedure
    Set oProcedure = Application.Database.Procedures.Lookup(procedureName, lkLookupProcedureByName)
    oProcedure.Parameters("@@lang").InputValue = Database.Locale
    oProcedure.Parameters("@@idcoworker").InputValue = ActiveUser.Record.id
    Call oProcedure.Execute(False)
    sXml = oProcedure.Result
    loadXmlFromStoredProcedure = sXml
Exit Function
ErrorHandler:
    loadXmlFromStoredProcedure = ""
End Function

'=============================================
' Load related record
'=============================================
Public Function loadRelatedRecord(sClass As String, lId As Long) As LDE.Record
    On Error GoTo ErrorHandler
    
    Dim oRecord As New LDE.Record
    Call oRecord.Open(Database.Classes(sClass), lId)
    Set loadRelatedRecord = oRecord
    
Exit Function
ErrorHandler:
    Set loadRelatedRecord = Nothing
End Function

'=============================================
' Comparable version
'=============================================
Public Function getComparableVersion(sVersion As String) As Long
    On Error GoTo ErrorHandler
    
    Dim nMajor As Long
    Dim nMinor As Long
    Dim nBuild As Long
    Dim iMajor As Long
    Dim iMinor As Long
    Dim iBuild As Long
    Dim nIndex As Long
    Dim sSplitString As Variant
    
    nMajor = nMinor = nBuild = iMajor = iMinor = iBuild = nIndex = 0
    sSplitString = VBA.Split(sVersion, ".")
    
    For nIndex = LBound(sSplitString) To UBound(sSplitString)
         If nIndex = 0 Then
            iMajor = CInt(sSplitString(nIndex))
            nMajor = iMajor * 10000
        ElseIf nIndex = 1 Then
            iMinor = CInt(sSplitString(nIndex))
            nMinor = iMinor * 1000
        ElseIf nIndex = 2 Then
            iBuild = CInt(sSplitString(nIndex))
            nBuild = iBuild
        End If
        nIndex = nIndex + 1
    Next nIndex

    getComparableVersion = nMajor + nMinor + nBuild
 
Exit Function
ErrorHandler:
    Call UI.ShowError("getComparableVersion")
    getComparableVersion = 0
End Function


